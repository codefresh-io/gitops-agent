// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManifestServiceClient is the client API for ManifestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManifestServiceClient interface {
	// Add a manifest to a gitops repository
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type manifestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManifestServiceClient(cc grpc.ClientConnInterface) ManifestServiceClient {
	return &manifestServiceClient{cc}
}

func (c *manifestServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/github.com.codefresh_io.gitops_agent.pkg.apis.manifest.v1.ManifestService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManifestServiceServer is the server API for ManifestService service.
// All implementations must embed UnimplementedManifestServiceServer
// for forward compatibility
type ManifestServiceServer interface {
	// Add a manifest to a gitops repository
	Add(context.Context, *AddRequest) (*AddResponse, error)
	mustEmbedUnimplementedManifestServiceServer()
}

// UnimplementedManifestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManifestServiceServer struct {
}

func (UnimplementedManifestServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedManifestServiceServer) mustEmbedUnimplementedManifestServiceServer() {}

// UnsafeManifestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManifestServiceServer will
// result in compilation errors.
type UnsafeManifestServiceServer interface {
	mustEmbedUnimplementedManifestServiceServer()
}

func RegisterManifestServiceServer(s grpc.ServiceRegistrar, srv ManifestServiceServer) {
	s.RegisterService(&ManifestService_ServiceDesc, srv)
}

func _ManifestService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.codefresh_io.gitops_agent.pkg.apis.manifest.v1.ManifestService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManifestService_ServiceDesc is the grpc.ServiceDesc for ManifestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManifestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.codefresh_io.gitops_agent.pkg.apis.manifest.v1.ManifestService",
	HandlerType: (*ManifestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ManifestService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/manifest/v1/manifest.proto",
}
