syntax = "proto3";
option go_package = "github.com/codefresh-io/gitops-agent/pkg/apis/manifest/v1";

// Manifest Service
//
// Manifest Service API allows you to perform CRUD operations on manifests
// in a specified git repository.
package github.com.codefresh_io.gitops_agent.pkg.apis.manifest.v1;

import "google/rpc/status.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Repository represents a remote git repository
message Repository {
    string provider = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "git provider name",
        default: "github",
        required: ['provider']
    }];

    string clone_url = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "repository clone url",
        required: ['clone_url']
    }];
}

// Manifest represents a file containing a manifest
message Manifest {
    string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "manifest file name",
        required: ['name']
    }];
    
    string data = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "manifest data",
        required: ['data']
    }];
}

message AddRequest {
    Repository repo = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "repository to operate on",
        required: ['repo']
    }];

    Manifest manifest = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "manifest",
        required: ['manifest']
    }];
}

message AddResponse {
    string path = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "where the manifest was saved to",
    }];
}

service ManifestService {
    // Add a manifest to a gitops repository
    rpc Add(AddRequest) returns (AddResponse) {
        option (google.api.http) = {
            post: "/api/v1/manifests"
            body: "*"
        };
    }
}
